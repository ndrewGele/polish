% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modularUI.R
\name{modularUI}
\alias{modularUI}
\title{Assemble UI content from files into Shiny Layout}
\usage{
modularUI(module.dir, module.file, numbered = FALSE, layout.fun, ...)
}
\arguments{
\item{module.dir}{Path to directory that contains modules (child directories)}

\item{module.file}{Name of file found within module directories that contains UI code}

\item{numbered}{If \code{TRUE}, directories will be ordered by numeric prefix (e.g., \verb{01_Index}, \verb{02_About})}

\item{layout.fun}{Any Shiny UI function that leverages \code{tabPanel()} elements (\code{navbarPage()}, \code{navlistPanel()}, \code{tabsetPanel()}, etc)}

\item{...}{Additional arguments to be passed to the supplied \code{layout.fun}}
}
\value{
A Shiny UI object
}
\description{
Compiles all Module UI files into the desired \code{layout.fun} using \code{do.call()}, keeping your \code{app.R} file tidy.
This can be run within \code{ui.R}, \code{shinyUI()}, or \code{renderUI()}, just like any other Shiny UI element.
}
\examples{
# app.R
# Create a UI object and render it
\dontrun{
server <- function(input, output, session) {
  output$appUI <- renderUI({
    modularUI(
      module.dir = file.path('.', 'modules'),
      module.file = 'ui.R',
      layout.fun = navbarPage,
      title = 'My Modular App'
    )
  })
}
ui <- uiOutput('appUI')
shinyApp(ui, server)
}
}
